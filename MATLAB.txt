/////////////
SESSION 1
////////////

clc ->  clear console
; -> don't print

clear -> clear all variables
clear x y -> clear x an 
clearvars -> clear all variables
clearvars x y -> clear variables x and y
clearvars -except x y -> clear all variables except x and y

[x, y; z, w] -> x y
                z w
size(Matrix) -> row col
length(Matrix) -> max(size(Matrix))
x' -> transpose x

command + f1 -> help

save('address/filename') -> save all variables
save('address/filename', 'x', 'y') -> save variables x and y to address/filename
load('address/filename') -> load variables from address/filename
load('address/filename', 'x', 'y') -> load just variables x and y from address/filename
load filename -> load variables from filename

% -> comment
%{ comment %} -> comment
%% -> new section


rand(x,y) -> random matrix x by y
randn(x,y) -> random matrix x by y with normal distribution

x:y -> generate x to y with step 1
x:k:y -> generate x to y with step k

filename -> run filename.m

sprintf("sum = %d", sum) -> print sum = sum

figure -> open new figure
figure('Name', 'abc') -> open new figure with title 'abc'
hold on -> hold on current plot on figure
close all -> close all figures
subplot(2,3,1) -> 2x3 grid, 1st plot
plot(x,y) -> plot x and y on figure
stem(x,y) -> plot x and y on figure with stem
arguman for plot or stem:
    'Color', 'r' -> show red wave
    'LineWidth', 2 -> show wave with width 2
xlim([0, 10]) -> set x axis limit from 0 to 10
ylim([0, 10]) -> set y axis limit from 0 to 10

~= -> not equal

function [x, y] = function_name(a, b) -> function with 2 input and 2 output 

zeros(x,y) -> x by y matrix with all zeros
ones(x,y) -> x by y matrix with all ones

round(x) -> round x
round(x, n) -> round x with n digits after point

loop from start to end with step:
    for i = start:step:end
        % do something
    end


/////////////
SESSION 2
////////////

matrix = [1 2 3; 4 5 6; 7 8 9] -> 3x3 matrix
matrix(1, 2) -> 2nd element of 1st row

addrss = 'address' -> address
name = 'filename' -> set name to filename
path = [address, '/', name] -> path = 'address/filename'      //concatenate strings

cell = {1, 2, 3; 4, 5, 6; 7, 8, 9} -> 3x3 cell
cell{1, 2} -> 2nd element of 1st row

struct = struct('name', 'ali', 'age', 20) -> struct with (name and age) fields and values (ali and 20)

st.name = 'ali' -> add name field to st struct with value ali
st.age = 20 -> add age field to st struct with value 20

dir('address') -> list files in address

cell2mat(cell) -> convert cell to matrix

imread('address') -> read image from address
imshow(image) -> show image

imresize(pic, [x, y]) -> resize pic to x by y scale
rgb2gray(pic) -> convert pic to gray scale
im2bw(pic) -> convert pic to black and white

uigetfile -> open file dialog
uigetfile({'*.jpg;*.png}) -> open file dialog with filter(jpg and png)
uigetfile({'*.jpg;*.png}, 'Select an image') -> open file dialog with filter(jpg and png) and title 'Select an image'

graythresh(pic) -> find threshold of pic(a number between 0 and 1 for making pic binary)
im2bw(picture, threshold) -> convert picture to binary with threshold
bwareaopen(BW,P) -> removes all connected components (objects) that have fewer than P pixels from the binary image BW
regionprops(BW, "BoundingBox") -> find bounding box of objects in BW
rectangle('Position', [x, y, w, h], "EdgeColor", "r") -> draw rectangle with x, y, w, h and red color

[r, c] = find(BW == number) -> find row and column of number in BW
corr2(pic1, pic2) -> correlation of pic1 and pic2 2D

value, index = max(array) -> find max value and index of array
value, index = min(array) -> find min value and index of array

cell2mat(cell) -> convert cell to matrix
matrix = [matrix 3] -> add 3 to matrix

file = fopen('address', 'wt') -> open file in address with write and text mode
fprintf(file, "text") -> write text to file


/////////////
end of SESSION 2
////////////